#!/bin/bash
set -e

# Improved ComfyUI Model Installer
# This script addresses common issues with downloading models
echo "=== ComfyUI Enhanced Model Downloader ==="

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values
TEST_MODE=false
COMFYUI_DIR=""
VERBOSE=false

# Parse command-line arguments
for arg in "$@"; do
  if [ "$arg" = "--test" ]; then
    TEST_MODE=true
  elif [ "$arg" = "--verbose" ] || [ "$arg" = "-v" ]; then
    VERBOSE=true
  elif [ "$arg" != "--test" ] && [ "$arg" != "--verbose" ] && [ "$arg" != "-v" ]; then
    COMFYUI_DIR="$arg"
  fi
done

# If no directory was specified, use current directory
if [ -z "$COMFYUI_DIR" ]; then
  COMFYUI_DIR=$(pwd)
  echo "No directory specified, using current directory: $COMFYUI_DIR"
else
  echo "Using specified directory: $COMFYUI_DIR"
fi

# Determine optimal number of parallel downloads based on CPU cores
AVAILABLE_CORES=$(nproc 2>/dev/null || echo 4)
MAX_PARALLEL_DOWNLOADS=$((AVAILABLE_CORES * 3 / 4))
MAX_PARALLEL_DOWNLOADS=$((MAX_PARALLEL_DOWNLOADS < 4 ? 4 : MAX_PARALLEL_DOWNLOADS))
MAX_PARALLEL_DOWNLOADS=$((MAX_PARALLEL_DOWNLOADS > 32 ? 32 : MAX_PARALLEL_DOWNLOADS))

# Function to show progress
show_progress() {
  local msg="$1"
  echo ""
  echo "---------------------------------------------------"
  echo "  $msg"
  echo "---------------------------------------------------"
}

# Check if the specified directory is a ComfyUI directory (unless in test mode)
if [ "$TEST_MODE" = false ]; then
  if [ ! -d "$COMFYUI_DIR" ]; then
    echo "ERROR: The specified directory does not exist: $COMFYUI_DIR"
    echo "Creating it now..."
    mkdir -p "$COMFYUI_DIR"
  fi

  if [ ! -d "$COMFYUI_DIR/models" ] || [ ! -d "$COMFYUI_DIR/comfy" ]; then
    echo "WARNING: The specified directory does not appear to be a ComfyUI installation."
    echo "This script will create the necessary model directories, but ComfyUI itself might not be installed."
    echo "To bypass this warning, use the --test flag."
    echo ""
    echo "Would you like to continue anyway? (y/n)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      echo "Setup aborted."
      exit 1
    fi
  fi
else
  echo "Running in TEST MODE - ComfyUI directory check bypassed"
  echo "Using directory: $COMFYUI_DIR"
fi

show_progress "Creating model directories"
# Create ALL required directories with error handling
mkdir -p "$COMFYUI_DIR/models/checkpoints" || echo "Warning: Could not create checkpoints directory"
mkdir -p "$COMFYUI_DIR/models/clip_vision" || echo "Warning: Could not create clip_vision directory"
mkdir -p "$COMFYUI_DIR/models/vae" || echo "Warning: Could not create vae directory"
mkdir -p "$COMFYUI_DIR/models/loras" || echo "Warning: Could not create loras directory"
mkdir -p "$COMFYUI_DIR/models/controlnet" || echo "Warning: Could not create controlnet directory"
mkdir -p "$COMFYUI_DIR/models/upscale_models" || echo "Warning: Could not create upscale_models directory"
mkdir -p "$COMFYUI_DIR/models/facerestore_models" || echo "Warning: Could not create facerestore_models directory"
mkdir -p "$COMFYUI_DIR/models/ipadapter" || echo "Warning: Could not create ipadapter directory"
mkdir -p "$COMFYUI_DIR/models/instantid/antelopev2" || echo "Warning: Could not create instantid/antelopev2 directory"
mkdir -p "$COMFYUI_DIR/models/insightface" || echo "Warning: Could not create insightface directory"
mkdir -p "$COMFYUI_DIR/models/ultralytics/bbox" || echo "Warning: Could not create ultralytics/bbox directory"
mkdir -p "$COMFYUI_DIR/models/sams" || echo "Warning: Could not create sams directory"
mkdir -p "$COMFYUI_DIR/models/reactor/faces" || echo "Warning: Could not create reactor/faces directory"
mkdir -p "$COMFYUI_DIR/models/reswapper" || echo "Warning: Could not create reswapper directory"

# Check if all directories were created
echo "Verifying directories..."
ALL_DIRS_CREATED=true
for dir in "checkpoints" "clip_vision" "vae" "loras" "controlnet" "upscale_models" "facerestore_models" "ipadapter" "instantid/antelopev2" "insightface" "ultralytics/bbox" "sams" "reactor/faces" "reswapper"; do
  if [ ! -d "$COMFYUI_DIR/models/$dir" ]; then
    echo "ERROR: Failed to create directory: $COMFYUI_DIR/models/$dir"
    ALL_DIRS_CREATED=false
  fi
done

if [ "$ALL_DIRS_CREATED" = false ]; then
  echo "WARNING: Some directories failed to create. This might cause download failures."
  echo "Please check your file permissions and disk space."
  echo "Would you like to continue anyway? (y/n)"
  read -r response
  if [[ ! "$response" =~ ^[Yy]$ ]]; then
    echo "Setup aborted."
    exit 1
  fi
fi

# Check for wget
if ! command -v wget &>/dev/null; then
  echo "ERROR: wget is not installed. Please install wget to use this script."
  echo "On Ubuntu/Debian: sudo apt-get install wget"
  echo "On CentOS/RHEL: sudo yum install wget"
  echo "On macOS with Homebrew: brew install wget"
  exit 1
fi

cd "$COMFYUI_DIR"

# ====================================================
# IPAdapter Special Case Handling - Processed Sequentially
# ====================================================
show_progress "Downloading IPAdapter models that require special naming"

# Array of source URLs and destination filenames
declare -a ipa_special_models=(
  "https://huggingface.co/h94/IP-Adapter/resolve/main/models/image_encoder/model.safetensors|models/clip_vision/CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors"
  "https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/image_encoder/model.safetensors|models/clip_vision/CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors"
  "https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-Plus/resolve/main/image_encoder/pytorch_model.bin|models/clip_vision/clip-vit-large-patch14-336.bin"
  "https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-Plus/resolve/main/ip_adapter_plus_general.bin|models/ipadapter/Kolors-IP-Adapter-Plus.bin"
  "https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-FaceID-Plus/resolve/main/ipa-faceid-plus.bin|models/ipadapter/Kolors-IP-Adapter-FaceID-Plus.bin"
)

# Process each URL and destination pair - doing these sequentially for better visibility
echo "Processing ${#ipa_special_models[@]} special case IPAdapter models sequentially..."

for pair in "${ipa_special_models[@]}"; do
  url=$(echo "$pair" | cut -d'|' -f1)
  dest=$(echo "$pair" | cut -d'|' -f2)

  # Get filename for better logging
  filename=$(basename "$dest")
  full_path="$COMFYUI_DIR/$dest"

  # Make sure the directory exists
  mkdir -p "$(dirname "$full_path")"

  echo "Downloading to $dest ..."
  if wget -q -c "$url" -O "$full_path" --show-progress; then
    echo "✓ $dest - Complete"
  else
    echo "✗ $dest - Failed"
    echo "  URL: $url"
  fi
done

echo "All IPAdapter special case models have been processed."

# ====================================================
# Main Model Downloads - With Clean Success/Failure Reporting
# ====================================================
show_progress "Starting main model downloads"
echo "Using $MAX_PARALLEL_DOWNLOADS parallel downloads (based on $AVAILABLE_CORES CPU cores)"

# Check if download list exists
DOWNLOAD_LIST="$SCRIPT_DIR/model_downloads.txt"
if [ ! -f "$DOWNLOAD_LIST" ]; then
  echo "ERROR: $DOWNLOAD_LIST not found!"
  echo "Please ensure the model_downloads.txt file is in the same directory as this script."
  exit 1
fi

# Create a temporary file to hold download commands
DOWNLOAD_COMMANDS_FILE=$(mktemp)
# Create a temporary directory to store success/failure logs
TEMP_LOG_DIR=$(mktemp -d)

# Read the download list and create wget commands
while read -r line; do
  # Skip empty lines and comments
  if [[ -z "$line" || "$line" == \#* ]]; then
    # If it's a comment, print it as a section header
    if [[ "$line" == \#* ]]; then
      echo ""
      echo "$line"
    fi
    continue
  fi

  # Split the line by pipe character to get URL and destination
  url=$(echo "$line" | cut -d'|' -f1)
  dest=$(echo "$line" | cut -d'|' -f2)

  # Get filename for tracking
  filename=$(basename "$url" | cut -d'?' -f1)

  # Create a unique log identifier
  log_id=$(echo "$url" | md5sum | cut -d' ' -f1)

  # First ensure the directory exists
  mkdir_cmd="mkdir -p \"$COMFYUI_DIR/$dest\""

  # Prepare wget options
  wget_opts="-q -c"
  if [ "$VERBOSE" = true ]; then
    wget_opts="-c" # More verbose output
  fi

  # Add the download command to our commands file with success/failure reporting
  echo "$mkdir_cmd && cd \"$COMFYUI_DIR\" && wget $wget_opts \"$url\" -P \"./$(echo $dest)\" > \"$TEMP_LOG_DIR/$log_id.log\" 2>&1 && echo \"$dest/$filename --> Complete\" > \"$TEMP_LOG_DIR/$log_id.success\" || { echo \"$dest/$filename --> Failed\" > \"$TEMP_LOG_DIR/$log_id.fail\"; echo \"$url\" >> \"$TEMP_LOG_DIR/$log_id.fail\"; }" >>"$DOWNLOAD_COMMANDS_FILE"
done <"$DOWNLOAD_LIST"

# Count total downloads
TOTAL_DOWNLOADS=$(wc -l <"$DOWNLOAD_COMMANDS_FILE")
echo "Starting $TOTAL_DOWNLOADS downloads with $MAX_PARALLEL_DOWNLOADS parallel processes..."
echo "This may take a while depending on your internet connection speed."
echo "Download results will be reported when complete."

# Execute downloads with xargs for better parallelism
cat "$DOWNLOAD_COMMANDS_FILE" | xargs -P "$MAX_PARALLEL_DOWNLOADS" -I {} bash -c "{}"

# Process and display results
echo ""
echo "Download Results:"
echo "-----------------"

# Count successful downloads
SUCCESS_COUNT=0
if ls "$TEMP_LOG_DIR"/*.success 1>/dev/null 2>&1; then
  SUCCESS_COUNT=$(ls -1 "$TEMP_LOG_DIR"/*.success 2>/dev/null | wc -l)

  if [ "$SUCCESS_COUNT" -gt 0 ]; then
    echo "✓ Successfully downloaded $SUCCESS_COUNT models"

    if [ "$VERBOSE" = true ]; then
      echo ""
      echo "Successful Downloads:"
      echo "--------------------"
      cat "$TEMP_LOG_DIR"/*.success | sort
    fi
  fi
fi

# Print failed downloads and their error messages
FAILURE_COUNT=0
if ls "$TEMP_LOG_DIR"/*.fail 1>/dev/null 2>&1; then
  FAILURE_COUNT=$(ls -1 "$TEMP_LOG_DIR"/*.fail 2>/dev/null | wc -l)

  if [ "$FAILURE_COUNT" -gt 0 ]; then
    echo ""
    echo "✗ Failed Downloads: $FAILURE_COUNT"
    echo "--------------------"

    # Process each failure log
    for fail_file in "$TEMP_LOG_DIR"/*.fail; do
      log_id=$(basename "$fail_file" .fail)
      error_log="$TEMP_LOG_DIR/$log_id.log"

      # Print the failure info
      cat "$fail_file"

      # Print the wget error if available
      if [ -f "$error_log" ]; then
        echo "  Error details:"
        grep -i "error\|failed\|permission denied" "$error_log" | head -3 | sed 's/^/    /'
        echo ""
      fi
    done

    echo ""
    echo "WARNING: $FAILURE_COUNT downloads failed. See details above."
    echo "You may want to check for disk space, file permissions, or network issues."
    echo "You can run the script again to retry the failed downloads."
  fi
else
  echo ""
  echo "✓ All downloads completed successfully!"
fi

# Clean up
rm -rf "$TEMP_LOG_DIR"
rm "$DOWNLOAD_COMMANDS_FILE"

echo ""
echo "Summary: $SUCCESS_COUNT successful, $FAILURE_COUNT failed out of $TOTAL_DOWNLOADS total"

show_progress "Download Complete!"
echo "All available models have been downloaded to $COMFYUI_DIR/models/"
echo "IPAdapter models have been properly renamed for the Unified Loader."
echo ""
echo "You can now start using ComfyUI with all the downloaded models."
echo "If you had failed downloads, you can run this script again to retry."
